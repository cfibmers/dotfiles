" Be iMproved
set nocompatible

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))   " load NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'            " let NeoBundle manage itself

" color schemes
NeoBundle 'altercation/vim-colors-solarized'     " color scheme
NeoBundle 'w0ng/vim-hybrid'                      " color scheme

" general navigation
NeoBundle 'kien/ctrlp.vim'                       " fuzzy file open
NeoBundle 'scrooloose/nerdtree'                  " filesystem navigation
NeoBundle 'majutsushi/tagbar'                    " code tree
NeoBundle 'bling/vim-airline'                    " improved status bar
NeoBundle 'vim-airline/vim-airline-themes'       " color schemes for vim-airline
NeoBundle 'mhinz/vim-signify'                    " line markers
NeoBundle 'mbbill/undotree'                      " undo history as tree
NeoBundle 'scrooloose/syntastic'                 " syntax checking
NeoBundle 'matchit.zip'                          " extended % matching

" coding plugins
NeoBundle 'tpope/vim-commentary'                 " comment code blocks
NeoBundle 'tpope/vim-endwise'                    " automatically end code blocks
NeoBundle 'tpope/vim-surround'                   " add/remove quotes, parents, braces
NeoBundle 'tpope/vim-repeat'                     " expanded `.` completion
NeoBundle 'tpope/vim-fugitive'                   " git integration
NeoBundle 'terryma/vim-multiple-cursors'         " sublime-like multiple cursors
NeoBundle 'amdt/vim-niji', { 'stay_same' : 1 }   " rainbow parentheses - dead plugin

" search plugins
NeoBundleLazy 'mileszs/ack.vim', {'autoload':{'commands':'Ack'}}
NeoBundleLazy 'rking/ag.vim', {'autoload':{'commands':'Ag'}}

" autocompletion and snippets
if (has('lua'))
  NeoBundle 'Shougo/neocomplete.vim'
else
  NeoBundle 'Shougo/neocomplcache.vim'
endif
"NeoBundle 'Shougo/neosnippet.vim'
"NeoBundle 'Shougo/neosnippet-snippets'

NeoBundleLazy 'gregsexton/gitv', {'depends':['tpope/vim-fugitive'], 'autoload':{'commands':'Gitv'}}

" file types
NeoBundle 'honza/dockerfile.vim'
NeoBundleLazy 'cespare/vim-toml', {'autoload':{'filetypes':['toml']}}

" golang
NeoBundleLazy 'fatih/vim-go', {'autoload': {'filetypes': ['go']}}

" javascript
NeoBundleLazy 'elzr/vim-json.git', {'autoload':{'filetypes':['javascript','json']}}

" css / html
NeoBundleLazy 'mattn/emmet-vim', {'autoload':{'filetypes':['html','css']}}
NeoBundleLazy 'tpope/vim-haml', {'autoload':{'filetypes':['haml']}}
NeoBundleLazy 'nono/vim-handlebars', {'autoload':{'filetypes':['handlebars']}}
NeoBundleLazy 'cakebaker/scss-syntax.vim', {'autoload':{'filetypes':['scss','sass']}}
NeoBundleLazy 'hail2u/vim-css3-syntax', {'autoload':{'filetypes':['css','scss','sass']}}
NeoBundleLazy 'othree/html5.vim', {'autoload':{'filetypes':['html']}}
NeoBundleLazy 'juvenn/mustache.vim', {'autoload':{'filetypes':['mustache']}}
NeoBundleLazy 'gregsexton/MatchTag', {'autoload':{'filetypes':['html','xml']}}

call neobundle#end()                 " NeoBundle load complete
filetype plugin on                   " enable filetype plugins
filetype indent on                   " enable filetype specific indentation
NeoBundleCheck                       " process plugins

" Mac OS X detection
let mac = 0
if has('mac') || has('macunix') || (has('unix') && system('uname') =~ 'Darwin')
  let mac = 1
endif

" Force 256 colors for gui and mac terminal
if has("gui_running") || (&term =~ "xterm")
  set t_Co=256
  set t_Sb=[4%dm
  set t_Sf=[3%dm
endif

" Setup a good font for macvim
if has("gui_macvim")
  set antialias
  set guifont=Inconsolata-dz\ for\ Powerline:h10
  let g:airline_powerline_fonts = 1
endif

" Configuration for all graphical front ends
if has("gui_running")
  " Use curly underline for spelling
  highlight SpellBad term=underline gui=undercurl guisp=Orange

  " Configure mouse in gvim
  set mouse=a
  behave xterm
end

" Tell syntax we're using a dark background
highlight Normal guibg=black guifg=white
set background=dark

" Alter colorscheme based on available terminal colors
if &t_Co >= 256
  "colorscheme Tomorrow-Night
  silent! colorscheme hybrid
else
  highlight LineNr ctermfg=DarkGrey
  highlight CursorLineNr cterm=bold ctermfg=Yellow
  highlight CursorLine cterm=none
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
endif

" Keep vim gemerated artifacts in ~/.vim
if exists("*mkdir")
  if !isdirectory($HOME . "/.vim/backups")
    call mkdir($HOME . "/.vim/backups", "p")
  endif
  if !isdirectory($HOME . "/.vim/swaps")
    call mkdir($HOME . "/.vim/swaps", "p")
  endif
  if !isdirectory($HOME . "/.vim/undo")
    call mkdir($HOME . "/.vim/undo", "p")
  endif
endif
set backupdir=$HOME/.vim/backups,$TMPDIR,/tmp
set directory=$HOME/.vim/swaps,$TMPDIR,/tmp
set undodir=$HOME/.vim/undo,$TMPDIR,/tmp

set autoindent                         " always turn on auto indent
set backspace=indent,eol,start         " allow backspacing over everything in insert mode
set backup                             " keep a backup file (restore to previous version)
set cursorline                         " highlight the current line
set clipboard=unnamed                  " yank to and paste from the system clipboard by default
set complete-=i                        " don't search included files for completion
set completeopt-=preview               " disable preview window on completion
set display+=lastline                  " display as much as possible of the last line
set expandtab                          " use spaces instead of tabs in insert mode
set foldmethod=syntax                  " syntax highlighting items specify folds
set foldlevel=20                       " folds with a higher level than this will be closed
set formatoptions+=r                   " insert the comment leader after enter in insert mode
set guioptions+=c                      " use console dialogs instead of popups
set guioptions-=L                      " remove left scrollbar
set guioptions-=r                      " remove right scrollbar
set history=1000                       " keep 1000 lines of command line history
set hlsearch                           " highlight the found search string
set ignorecase                         " ignore case when matching search string
set incsearch                          " incremental search
set laststatus=2                       " always show a status line
set modeline                           " support modelines in files
set modelines=5                        " number of lines checked for set commands
set number                             " turn on line numbers
set numberwidth=5                      " minimum number columns to use for line number
set ruler                              " show the cursor position all the time
set shiftround                         " round indent to a multiple of shiftwidth
set shiftwidth=4                       " number of spaces to use for each step of autoindent
set scrolloff=2                        " minimum screen lines to keep above/below cursor
set showcmd                            " display incomplete commands
set showmatch                          " when bracket is inserted, briefly jump to matching bracket
set smartcase                          " override ignorecase if search contains an upper case char
set smartindent                        " smart indenting when starting a new line
set smarttab                           " insrt blanks on <tab> according to shiftwidth
set softtabstop=2                      " spaces that a <tab> counts for while editing
set tabstop=4                          " treat a tab as 4 spaces
set tags=tags,./tags,~/workspace/diego-release/tags,"$JAVA_HOME"/src/tags
set undofile                           " keep an undo file (undo changes after closing)
set wildmenu                           " enhanced mode of command line completion
set wildmode=list:longest              " tab complete file names and list conflicts for select
if has('multi_byte') && &encoding =~? 'utf-8'
  set showbreak=â†ª
endif

" space clears search string highlighting
nnoremap <silent> <space> :nohl<cr><space>

" make Y consistent with C and D
nnoremap Y y$

" <Control>-{hjkl} to change active window
nnoremap <silent> <C-l> <c-w>l
nnoremap <silent> <C-h> <c-w>h
nnoremap <silent> <C-k> <c-w>k
nnoremap <silent> <C-j> <c-w>j

runtime! config/golang.vim
runtime! config/neocomplete.vim
"runtime! config/neosnippet.vim
runtime! config/omnicompletion.vim

" vim-ariline
if mac
  let g:airline_powerline_fonts = 1
endif
let g:airline#extensions#tabline#enabled = 1

" Ctrl-P
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_show_hidden = 1
nnoremap <leader>e :CtrlPBuffer<cr>

" niji
let g:niji_matching_filetypes = ['lisp', 'ruby', 'python', 'go', 'java']

" NERDTree
let NERDTreeShowBookmarks=1
nmap <F9> :NERDTreeFind<CR>
nnoremap <leader>n :NERDTreeToggle<cr>

" syntastic
let g:syntastic_go_checkers=['go', 'golint', 'govet', 'errcheck']

" Tagbar
nmap <F8> :TagbarToggle<CR>

" undotree
let g:undotree_DiffAutoOpen = 1
let g:undotree_TreeNodeShape = 'o'
let g:undotree_DiffCommand = "diff -u"
nmap <F7> :UndotreeToggle<CR>
nnoremap <leader>u :UndotreeToggle<cr>

" Dictionary - \d to open word in dictionary
if mac
  nmap <silent> <Leader>d :!open dict://<cword><CR><CR>
endif

" :TOhtml
let html_use_css=1
let use_xhtml=1

" netrw
let g:netrw_ftpmode="ascii"

" JSON
let g:vim_json_syntax_conceal=0        " Disable double quote hiding

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  autocmd FocusLost * silent! wa       " save on focus loss in gui

  " Return to last edit position when opening files
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  autocmd BufNewFile,BufRead *.md set filetype=markdown

  autocmd FileType gitcommit setlocal spell
  autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

  autocmd FileType help setlocal nospell
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
  autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
  autocmd FileType text setlocal spell
  autocmd FileType text setlocal textwidth=78
  autocmd FileType markdown setlocal spell textwidth=78
  autocmd FileType vim setlocal expandtab shiftwidth=2 tabstop=4 softtabstop=4
  autocmd FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
  autocmd FileType yaml setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2

  " golang
  "autocmd FileType go autocmd BufWritePre <buffer> Fmt
  autocmd FileType go compiler go
  autocmd FileType go setlocal noexpandtab shiftwidth=2 tabstop=2 softtabstop=2
  autocmd Filetype go set makeprg=go\ build\ ./...
  autocmd Filetype go nnoremap <buffer> <leader>i :exe 'GoImport ' . expand('<cword>')<CR>
  autocmd Filetype go nnoremap <buffer>gd :GoDef<CR>
  autocmd Filetype go nnoremap <leader>r :GoRun %<CR>
  autocmd Filetype go nnoremap <leader>gd :GoDescribe<CR>
  autocmd Filetype go nnoremap <leader>gs :sp <CR>:exe "GoDef"<CR>
  autocmd Filetype go nnoremap <leader>gt :tab split <CR>:exe "GoDef"<CR>
  autocmd Filetype go nnoremap <leader>gv :vsp <CR>:exe "GoDef" <CR>
endif " autocmd

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
endif
